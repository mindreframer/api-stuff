#! /usr/bin/env ruby

require 'optparse'
require "json"

begin
  require "swagger_hash"
  require "swagger_reader"
rescue LoadError
  lib = File.expand_path(File.dirname(__FILE__) + '/../lib')

  if $:.include?(lib)
    raise
  else
    $:.unshift(lib)
    retry
  end
end

opt_input = nil
opt_output = nil
opt_comment = nil
opt_extension = nil
opt_filename = nil

parser = OptionParser.new do |parser|
  parser.on('-i','--input PATH', 'Directory of the annotated source code') do |value|
    opt_input = value
  end

  parser.on('-e','--ext ("rb"|"c"|"js"|"py")', 'File extension of the source code') do |value|
    opt_extension = value
  end

  parser.on('-f','--file FILENAME', 'Overwrites options: -i and -e. Takes a single annotated source code file') do |value|
    opt_filename = value
  end

  parser.on('-c','--comment ("##~"|"//~")','Comment tag used to write docs') do |value|
    opt_comment = value
  end

  parser.on('-o','--output PATH','Directory where the json output will be saved (optional)') do |value|
    opt_output = value
  end

  begin
    parser.parse!
  rescue Exception => e
    puts e.message
    puts parser
    abort
  end
end


puts opt_filename

unless ((opt_extension and opt_input and opt_comment) || (opt_filename and opt_comment))
  puts parser
  abort
end
 
def save(results, output_path)
  results.each do |k,v|
    puts "  Saving API #{k} to #{output_path}/#{k}" 
    File.new("#{output_path}/#{k}","w").puts v.to_json
  end

  # write resource listing
  key = results.keys.first
  listing = results[key]
  resource = {
    :apiVersion => listing[:apiVersion],
    :swaggerVersion => listing[:swaggerVersion],
    :basePath => listing[:basePath]
  }
  resource[:apis] = []

  results.each do |k,v|
    (resource[:apis] ||= []) << {:path => "/api-docs/" + k, :description => ""}
    #api.set :basePath => k, :description => ""
  end
  File.new("#{output_path}/api-docs","w").puts resource.to_json

end

def print(results)
  cont = 1
  results.each do |k,v|
    puts "API: #{cont}, #{k}\n"
    puts v.to_json
    cont=cont+1
  end
end

def run(input, extension, comment, output, filename)
  reader = SwaggerReader.new
  $_swaggerhash = Hash.new

  if filename.nil?
    code = reader.analyze_all_files(input,extension,comment)
  else 
    code = reader.analyze_file(filename, comment)
  end
  
  begin
    results = reader.process_code(code) unless code.nil? || code.empty?
  rescue SwaggerReaderException => e
    puts "There is a problem with your swagger annotation. See below...\n\n"
    puts e.inspect
  end  

  if filename.nil?
    puts "Swagger API in #{input}/**/*.#{extension}: #{results.size} API\n"
  else
    puts "Swagger API in #{filename}: #{results.size} API\n"
  end
  
  if output.nil?
    print(results)
  else
    save(results,output)
  end
  
  puts "Done!"

end


run(opt_input, opt_extension, opt_comment, opt_output, opt_filename)
