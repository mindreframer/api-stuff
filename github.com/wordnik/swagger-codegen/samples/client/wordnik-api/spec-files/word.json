{
  "resourcePath":"/word",
  "apis":[
    {
      "path":"/word.{format}/{word}/examples",
      "description":"",
      "operations":[
        {
          "parameters":[
            {
              "name":"word",
              "description":"Word to return examples for",
              "required":true,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"path"
            },
            {
              "name":"includeDuplicates",
              "defaultValue":"false",
              "description":"Show duplicate examples from different sources",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "false",
                  "true"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"useCanonical",
              "defaultValue":"false",
              "description":"If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "false",
                  "true"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"skip",
              "defaultValue":"0",
              "description":"Results to skip",
              "required":false,
              "dataType":"int",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"limit",
              "defaultValue":"5",
              "description":"Maximum number of results to return",
              "required":false,
              "dataType":"int",
              "allowMultiple":false,
              "paramType":"query"
            }
          ],
          "summary":"Returns examples for a word",
          "httpMethod":"GET",
          "errorResponses":[
            {
              "reason":"Invalid word supplied.",
              "code":400
            }
          ],
          "nickname":"getExamples",
          "responseClass":"ExampleSearchResults"
        }
      ]
    },
    {
      "path":"/word.{format}/{word}",
      "description":"",
      "operations":[
        {
          "parameters":[
            {
              "name":"word",
              "description":"String value of WordObject to return",
              "required":true,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"path"
            },
            {
              "name":"useCanonical",
              "defaultValue":"false",
              "description":"If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "false",
                  "true"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"includeSuggestions",
              "defaultValue":"true",
              "description":"Return suggestions (for correct spelling, case variants, etc.)",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "false",
                  "true"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            }
          ],
          "summary":"Given a word as a string, returns the WordObject that represents it",
          "httpMethod":"GET",
          "errorResponses":[
            {
              "reason":"Invalid word supplied.",
              "code":400
            }
          ],
          "nickname":"getWord",
          "responseClass":"WordObject"
        }
      ]
    },
    {
      "path":"/word.{format}/{word}/definitions",
      "description":"",
      "operations":[
        {
          "parameters":[
            {
              "name":"word",
              "description":"Word to return definitions for",
              "required":true,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"path"
            },
            {
              "name":"limit",
              "defaultValue":"200",
              "description":"Maximum number of results to return",
              "required":false,
              "dataType":"int",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"partOfSpeech",
              "description":"CSV list of part-of-speech types",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "noun",
                  "adjective",
                  "verb",
                  "adverb",
                  "interjection",
                  "pronoun",
                  "preposition",
                  "abbreviation",
                  "affix",
                  "article",
                  "auxiliary-verb",
                  "conjunction",
                  "definite-article",
                  "family-name",
                  "given-name",
                  "idiom",
                  "imperative",
                  "noun-plural",
                  "noun-posessive",
                  "past-participle",
                  "phrasal-prefix",
                  "proper-noun",
                  "proper-noun-plural",
                  "proper-noun-posessive",
                  "suffix",
                  "verb-intransitive",
                  "verb-transitive"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"includeRelated",
              "defaultValue":"false",
              "description":"Return related words with definitions",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "true",
                  "false"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"sourceDictionaries",
              "description":"Source dictionary to return definitions from.  If 'all' is received, results are returned from all sources. If multiple values are received (e.g. 'century,wiktionary'), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd, wiktionary, webster, century, wordnet",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "all",
                  "ahd",
                  "century",
                  "wiktionary",
                  "webster",
                  "wordnet"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":true,
              "paramType":"query"
            },
            {
              "name":"useCanonical",
              "defaultValue":"false",
              "description":"If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "false",
                  "true"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"includeTags",
              "defaultValue":"false",
              "description":"Return a closed set of XML tags in response",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "false",
                  "true"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            }
          ],
          "summary":"Return definitions for a word",
          "httpMethod":"GET",
          "errorResponses":[
            {
              "reason":"Invalid word supplied.",
              "code":400
            },
            {
              "reason":"No definitions found.",
              "code":404
            }
          ],
          "nickname":"getDefinitions",
          "responseClass":"List[Definition]"
        }
      ]
    },
    {
      "path":"/word.{format}/{word}/topExample",
      "description":"",
      "operations":[
        {
          "parameters":[
            {
              "name":"word",
              "description":"Word to fetch examples for",
              "required":true,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"path"
            },
            {
              "name":"useCanonical",
              "defaultValue":"false",
              "description":"If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "false",
                  "true"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            }
          ],
          "summary":"Returns a top example for a word",
          "httpMethod":"GET",
          "errorResponses":[
            {
              "reason":"Invalid word supplied.",
              "code":400
            }
          ],
          "nickname":"getTopExample",
          "responseClass":"Example"
        }
      ]
    },
    {
      "path":"/word.{format}/{word}/relatedWords",
      "description":"",
      "operations":[
        {
          "parameters":[
            {
              "name":"word",
              "description":"Word to fetch relationships for",
              "required":true,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"path"
            },
            {
              "name":"useCanonical",
              "defaultValue":"false",
              "description":"If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "false",
                  "true"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"relationshipTypes",
              "description":"Limits the total results per type of relationship type",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "synonym",
                  "antonym",
                  "variant",
                  "equivalent",
                  "cross-reference",
                  "related-word",
                  "rhyme",
                  "form",
                  "etymologically-related-term",
                  "hypernym",
                  "hyponym",
                  "inflected-form",
                  "primary",
                  "same-context",
                  "verb-form",
                  "verb-stem"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"limitPerRelationshipType",
              "defaultValue":"10",
              "description":"Restrict to the supplied relatinship types",
              "required":false,
              "allowableValues":{
                "valueType":"RANGE",
                "max":"Infinity",
                "min":1.0,
                "valueType":"RANGE"
              },
              "dataType":"int",
              "allowMultiple":false,
              "paramType":"query"
            }
          ],
          "summary":"Given a word as a string, returns relationships from the Word Graph",
          "httpMethod":"GET",
          "errorResponses":[
            {
              "reason":"Invalid word supplied.",
              "code":400
            }
          ],
          "nickname":"getRelatedWords",
          "responseClass":"List[Related]"
        }
      ]
    },
    {
      "path":"/word.{format}/{word}/pronunciations",
      "description":"",
      "operations":[
        {
          "parameters":[
            {
              "name":"word",
              "description":"Word to get pronunciations for",
              "required":true,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"path"
            },
            {
              "name":"useCanonical",
              "defaultValue":"false",
              "description":"If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "false",
                  "true"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"sourceDictionary",
              "description":"Get from a single dictionary",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "ahd",
                  "century",
                  "cmu",
                  "macmillan",
                  "wiktionary",
                  "webster",
                  "wordnet"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"typeFormat",
              "description":"Text pronunciation type",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "ahd",
                  "arpabet",
                  "gcide-diacritical",
                  "IPA"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"limit",
              "defaultValue":"50",
              "description":"Maximum number of results to return",
              "required":false,
              "dataType":"int",
              "allowMultiple":false,
              "paramType":"query"
            }
          ],
          "summary":"Returns text pronunciations for a given word",
          "httpMethod":"GET",
          "errorResponses":[
            {
              "reason":"Invalid word supplied.",
              "code":400
            }
          ],
          "nickname":"getTextPronunciations",
          "responseClass":"List[TextPron]"
        }
      ]
    },
    {
      "path":"/word.{format}/{word}/hyphenation",
      "description":"",
      "operations":[
        {
          "parameters":[
            {
              "name":"word",
              "description":"Word to get syllables for",
              "required":true,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"path"
            },
            {
              "name":"useCanonical",
              "defaultValue":"false",
              "description":"If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
              "required":false,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"sourceDictionary",
              "description":"Get from a single dictionary. Valid options: ahd, century, wiktionary, webster, and wordnet.",
              "required":false,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"limit",
              "defaultValue":"50",
              "description":"Maximum number of results to return",
              "required":false,
              "dataType":"int",
              "allowMultiple":false,
              "paramType":"query"
            }
          ],
          "summary":"Returns syllable information for a word",
          "httpMethod":"GET",
          "errorResponses":[
            {
              "reason":"Invalid word supplied.",
              "code":400
            }
          ],
          "nickname":"getHyphenation",
          "responseClass":"List[Syllable]"
        }
      ]
    },
    {
      "path":"/word.{format}/{word}/frequency",
      "description":"",
      "operations":[
        {
          "parameters":[
            {
              "name":"word",
              "description":"Word to return",
              "required":true,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"path"
            },
            {
              "name":"useCanonical",
              "defaultValue":"false",
              "description":"If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
              "required":false,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"startYear",
              "defaultValue":"1800",
              "description":"Starting Year",
              "required":false,
              "dataType":"int",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"endYear",
              "defaultValue":"2012",
              "description":"Ending Year",
              "required":false,
              "dataType":"int",
              "allowMultiple":false,
              "paramType":"query"
            }
          ],
          "summary":"Returns word usage over time",
          "httpMethod":"GET",
          "errorResponses":[
            {
              "reason":"Invalid word supplied.",
              "code":400
            },
            {
              "reason":"No results.",
              "code":404
            }
          ],
          "nickname":"getWordFrequency",
          "responseClass":"FrequencySummary"
        }
      ]
    },
    {
      "path":"/word.{format}/{word}/phrases",
      "description":"",
      "operations":[
        {
          "parameters":[
            {
              "name":"word",
              "description":"Word to fetch phrases for",
              "required":true,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"path"
            },
            {
              "name":"limit",
              "defaultValue":"5",
              "description":"Maximum number of results to return",
              "required":false,
              "dataType":"int",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"wlmi",
              "defaultValue":"0",
              "description":"Minimum WLMI for the phrase",
              "required":false,
              "dataType":"int",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"useCanonical",
              "defaultValue":"false",
              "description":"If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "false",
                  "true"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            }
          ],
          "summary":"Fetches bi-gram phrases for a word",
          "httpMethod":"GET",
          "errorResponses":[
            {
              "reason":"Invalid word supplied.",
              "code":400
            }
          ],
          "nickname":"getPhrases",
          "responseClass":"List[Bigram]"
        }
      ]
    },
    {
      "path":"/word.{format}/{word}/etymologies",
      "description":"",
      "operations":[
        {
          "parameters":[
            {
              "name":"word",
              "description":"Word to return",
              "required":true,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"path"
            },
            {
              "name":"useCanonical",
              "description":"If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
              "required":false,
              "allowableValues":{
                "valueType":"LIST",
                "values":[
                  "false",
                  "true"
                ],
                "valueType":"LIST"
              },
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            }
          ],
          "summary":"Fetches etymology data",
          "httpMethod":"GET",
          "errorResponses":[
            {
              "reason":"Invalid word supplied.",
              "code":400
            },
            {
              "reason":"No definitions found.",
              "code":404
            }
          ],
          "nickname":"getEtymologies",
          "responseClass":"List[string]"
        }
      ]
    },
    {
      "path":"/word.{format}/{word}/audio",
      "description":"",
      "operations":[
        {
          "parameters":[
            {
              "name":"word",
              "description":"Word to get audio for.",
              "required":true,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"path"
            },
            {
              "name":"useCanonical",
              "defaultValue":"false",
              "description":"Use the canonical form of the word",
              "required":false,
              "dataType":"string",
              "allowMultiple":false,
              "paramType":"query"
            },
            {
              "name":"limit",
              "defaultValue":"50",
              "description":"Maximum number of results to return",
              "required":false,
              "dataType":"int",
              "allowMultiple":false,
              "paramType":"query"
            }
          ],
          "summary":"Fetches audio metadata for a word.",
          "httpMethod":"GET",
          "errorResponses":[
            {
              "reason":"Invalid word supplied.",
              "code":400
            }
          ],
          "nickname":"getAudio",
          "responseClass":"List[AudioFile]",
          "notes":"The metadata includes a time-expiring fileUrl which allows reading the audio file directly from the API.  Currently only audio pronunciations from the American Heritage Dictionary in mp3 format are supported."
        }
      ]
    },
    {
      "path": "/word.{format}/{word}/scrabbleScore",
      "description": "",
      "operations": [
        {
          "parameters": [
            {
              "name": "word",
              "description": "Word to get scrabble score for.",
              "required": true,
              "dataType": "string",
              "allowMultiple": false,
              "paramType": "path"
            }
          ],
          "summary": "Returns the Scrabble score for a word",
          "httpMethod": "GET",
          "responseTypeInternal": "com.wordnik.system.model.ScrabbleScoreResult",
          "errorResponses": [
            {
              "reason": "Invalid word supplied.",
              "code": 400
            },
            {
              "reason": "No scrabble score found.",
              "code": 404
            }
          ],
          "nickname": "getScrabbleScore",
          "responseClass": "ScrabbleScoreResult"
        }
      ]
    }
  ],
  "apiVersion":"4.0",
  "swaggerVersion":"1.0",
  "basePath":"http://api.wordnik.com/v4",
  "models":{
    "Syllable":{
      "properties":{
        "text":{
          "type":"string"
        },
        "seq":{
          "type":"int"
        },
        "type":{
          "type":"string"
        }
      },
      "id":"Syllable"
    },
    "AudioType":{
      "properties":{
        "id":{
          "type":"int"
        },
        "name":{
          "type":"string"
        }
      },
      "id":"AudioType"
    },
    "Facet":{
      "properties":{
        "facetValues":{
          "type":"Array",
          "items":{
            "$ref":"FacetValue"
          }
        },
        "name":{
          "type":"string"
        }
      },
      "id":"Facet"
    },
    "FacetValue":{
      "properties":{
        "count":{
          "type":"long"
        },
        "value":{
          "type":"string"
        }
      },
      "id":"FacetValue"
    },
    "Note":{
      "properties":{
        "noteType":{
          "type":"string"
        },
        "appliesTo":{
          "type":"Array",
          "items":{
            "type":"string"
          }
        },
        "value":{
          "type":"string"
        },
        "pos":{
          "type":"int"
        }
      },
      "id":"Note"
    },
    "FacetValue":{
      "properties":{
        "count":{
          "type":"long"
        },
        "value":{
          "type":"string"
        }
      },
      "id":"FacetValue"
    },
    "Related":{
      "properties":{
        "label1":{
          "type":"string"
        },
        "relationshipType":{
          "type":"string"
        },
        "label2":{
          "type":"string"
        },
        "label3":{
          "type":"string"
        },
        "words":{
          "type":"Array",
          "items":{
            "type":"string"
          }
        },
        "gram":{
          "type":"string"
        },
        "label4":{
          "type":"string"
        }
      },
      "id":"Related"
    },
    "WordObject":{
      "properties":{
        "id":{
          "type":"long",
          "required":true
        },
        "word":{
          "type":"string"
        },
        "originalWord":{
          "type":"string"
        },
        "suggestions":{
          "type":"Array",
          "items":{
            "type":"string"
          }
        },
        "canonicalForm":{
          "type":"string"
        },
        "vulgar":{
          "type":"string"
        }
      },
      "id":"WordObject"
    },
    "ScoredWord":{
      "properties":{
        "position":{
          "type":"int"
        },
        "id":{
          "type":"long"
        },
        "docTermCount":{
          "type":"int"
        },
        "lemma":{
          "type":"string"
        },
        "wordType":{
          "type":"string"
        },
        "score":{
          "type":"float"
        },
        "sentenceId":{
          "type":"long"
        },
        "word":{
          "type":"string"
        },
        "stopword":{
          "type":"boolean"
        },
        "baseWordScore":{
          "type":"double"
        },
        "partOfSpeech":{
          "type":"string"
        }
      },
      "id":"ScoredWord"
    },
    "Citation":{
      "properties":{
        "cite":{
          "type":"string"
        },
        "source":{
          "type":"string"
        }
      },
      "id":"Citation"
    },
    "ExampleSearchResults":{
      "properties":{
        "facets":{
          "type":"Array",
          "items":{
            "$ref":"Facet"
          }
        },
        "examples":{
          "type":"Array",
          "items":{
            "$ref":"Example"
          }
        }
      },
      "id":"ExampleSearchResults"
    },
    "Example":{
      "properties":{
        "id":{
          "type":"long"
        },
        "exampleId":{
          "type":"long"
        },
        "title":{
          "type":"string"
        },
        "text":{
          "type":"string"
        },
        "score":{
          "type":"ScoredWord"
        },
        "sentence":{
          "type":"Sentence"
        },
        "word":{
          "type":"string"
        },
        "provider":{
          "type":"ContentProvider"
        },
        "year":{
          "type":"int"
        },
        "rating":{
          "type":"float"
        },
        "documentId":{
          "type":"long"
        },
        "url":{
          "type":"string"
        }
      },
      "id":"Example"
    },
    "Sentence":{
      "properties":{
        "hasScoredWords":{
          "type":"boolean"
        },
        "id":{
          "type":"long"
        },
        "scoredWords":{
          "type":"Array",
          "items":{
            "$ref":"ScoredWord"
          }
        },
        "display":{
          "type":"string"
        },
        "rating":{
          "type":"int"
        },
        "documentMetadataId":{
          "type":"long"
        }
      },
      "id":"Sentence"
    },
    "ExampleUsage":{
      "properties":{
        "text":{
          "type":"string"
        }
      },
      "id":"ExampleUsage"
    },
    "ContentProvider":{
      "properties":{
        "id":{
          "type":"int"
        },
        "name":{
          "type":"string"
        }
      },
      "id":"ContentProvider"
    },
    "AudioFile":{
      "properties":{
        "attributionUrl":{
          "type":"string"
        },
        "commentCount":{
          "type":"int"
        },
        "voteCount":{
          "type":"int"
        },
        "fileUrl":{
          "type":"string"
        },
        "audioType":{
          "type":"string"
        },
        "id":{
          "type":"long",
          "required":true
        },
        "duration":{
          "type":"double"
        },
        "attributionText":{
          "type":"string"
        },
        "createdBy":{
          "type":"string"
        },
        "description":{
          "type":"string"
        },
        "createdAt":{
          "type":"Date"
        },
        "voteWeightedAverage":{
          "type":"float"
        },
        "voteAverage":{
          "type":"float"
        },
        "word":{
          "type":"string"
        }
      },
      "id":"AudioFile"
    },
    "Bigram":{
      "properties":{
        "count":{
          "type":"long"
        },
        "gram2":{
          "type":"string"
        },
        "gram1":{
          "type":"string"
        },
        "wlmi":{
          "type":"double"
        },
        "mi":{
          "type":"double"
        }
      },
      "id":"Bigram"
    },
    "Label":{
      "properties":{
        "text":{
          "type":"string"
        },
        "type":{
          "type":"string"
        }
      },
      "id":"Label"
    },
    "Frequency":{
      "properties":{
        "count":{
          "type":"long"
        },
        "year":{
          "type":"int"
        }
      },
      "id":"Frequency"
    },
    "FrequencySummary":{
      "properties":{
        "unknownYearCount":{
          "type":"int"
        },
        "totalCount":{
          "type":"long"
        },
        "frequencyString":{
          "type":"string"
        },
        "word":{
          "type":"string"
        },
        "frequency":{
          "type":"Array",
          "items":{
            "$ref":"Frequency"
          }
        }
      },
      "id":"FrequencySummary"
    },
    "Definition":{
      "properties":{
        "extendedText":{
          "type":"string"
        },
        "text":{
          "type":"string"
        },
        "sourceDictionary":{
          "type":"string"
        },
        "citations":{
          "type":"Array",
          "items":{
            "$ref":"Citation"
          }
        },
        "labels":{
          "type":"Array",
          "items":{
            "$ref":"Label"
          }
        },
        "score":{
          "type":"float"
        },
        "exampleUses":{
          "type":"Array",
          "items":{
            "$ref":"ExampleUsage"
          }
        },
        "attributionUrl":{
          "type":"string"
        },
        "seqString":{
          "type":"string"
        },
        "attributionText":{
          "type":"string"
        },
        "relatedWords":{
          "type":"Array",
          "items":{
            "$ref":"Related"
          }
        },
        "sequence":{
          "type":"string"
        },
        "word":{
          "type":"string"
        },
        "notes":{
          "type":"Array",
          "items":{
            "$ref":"Note"
          }
        },
        "textProns":{
          "type":"Array",
          "items":{
            "$ref":"TextPron"
          }
        },
        "partOfSpeech":{
          "type":"string"
        }
      },
      "id":"Definition"
    },
    "PartOfSpeech":{
      "properties":{
        "roots":{
          "type":"Array",
          "items":{
            "$ref":"root"
          }
        },
        "storageAbbr":{
          "type":"Array",
          "items":{
            "type":"string"
          }
        },
        "allCategories":{
          "type":"Array",
          "items":{
            "$ref":"category"
          }
        }
      },
      "id":"PartOfSpeech"
    },
    "TextPron":{
      "properties":{
        "raw":{
          "type":"string"
        },
        "seq":{
          "type":"int"
        },
        "rawType":{
          "type":"string"
        }
      },
      "id":"TextPron"
    },
    "ScrabbleScoreResult":{
      "properties":{
        "value":{
          "type":"int"
        }
      },
      "id":"ScrabbleScoreResult"
    }

  }
}
